<?xml version="1.0"?>
<launch>
  <arg name="load_manager"             default="true"/>
  <arg name="manager_name"             default="camera_manager"/>
  <arg name="manager_threads"          default="4"/>

  <arg name="sensor_name"              default="camera"/>

  <!-- Requried if you need to keep retrying until device is available
       Example: "Photoneo-MotionCam-3D Color-TRD-058"
  -->
  <arg name="serial_no"                default=""/>

  <!-- MotionCam
       - in `Camera` mode with color texture 1120x800@10 fps is achievable, resolution changes with `OutputTopology`
       - in `Scanner` mode with color texture 1680x1200@2 fps is achievable, data is high quality
  -->
  <arg name="operation_mode"           default="Camera"/> <!-- ["Camera", "Scanner"] -->

  <!-- Device has multiple components.

       Supported in this launchfile:
       - `Intensity` - texture data device aligned to `Range`, multiple texture sources to choose from
       - `Range` - depth map with 3D data, resolution depends on operation_mode and OutputTopology
       - `ColorCamera` - raw RGB data from physically separate subsensor, separate frame_id and calibration

      Don't enable components you don't use. Even ColorCamera alone at high resolution saturates 1 Gb link.
  -->

  <arg name="enable_intensity"       default="true"/>
  <arg name="enable_range"           value="true"/> <!-- mandatory in our launchfile-->
  <arg name="enable_color_camera"    default="false"/>

  <!-- Possible TextureSource (in Intensity):
       "Camera" operation_mode:  ["Color", "Laser", "LED"]
       "Scanner" operation_mode: ["Color", "Focus", "Laser", "Computed", "LED"]
  -->
  <arg name="texture_source"           default="Color"/>

  <arg name="color_exposure"           default="20.48" />      <!-- [0.32, 0.64, 1.28, 2.56, 5.12, 10.24, 14.336, 20.48, 24.576, 30.72, 34.816, 40.96, ...] for rest cosult docs -->
  <arg name="color_iso"                default="200" />        <!-- [50, 100, 200, 400, ...] higher ISO -> brighter image at the cost of noise -->
  <arg name="color_gamma"              default="1.0" />        <!-- [0.0-1000.0] non-linear gamma correction -->
  <arg name="depth_exposure"           default="10.240000" />  <!-- [10.24, 14.336, 20.48, 24.576, 30.72, 34.816, 40.96] -->
  <arg name="laser_power"              default="4095"/>        <!-- [0-4095] intensity of projected "red" light used for depth, decrease in case of overexposure-->
  <arg name="led_power"                default="4095"/>        <!-- [0-4095] LED "white" light intensity used for texture, decrease in case of overexposure -->

  <!-- Only for raw RGB in ColorCamera (not RGB texture), doesn't affect typical workflows -->
  <arg name="color_resolution"         default="Resolution_1932x1096"/> <!-- ["Resolution_1288x730", "Resolution_1932x1096", "Resolution_3864x2192"] -->

  <!-- Mainly if you need to lower framerate, in most modes 20 FPS would not be achievable -->
  <arg name="fps"                      default="20"/>

  <arg name="verbose"                  default="false"/>

  <!-- ####################################################################### -->
  <!-- What follows is implementation and should not be changed in typical use -->
  <!-- ####################################################################### -->

  <!-- Component description construction for
       - channels
       - pixel formats
       - internal pixel formats
       - calibrations
       - frame_ids
       follows
  -->

  <!-- Construct component description from args, e.g. like "Intensity,Range" -->
  <arg name="intensity_channel" default="Intensity," if="$(arg enable_intensity)"/>
  <arg name="intensity_channel" default=""           unless="$(arg enable_intensity)"/>

  <arg name="range_channel" default="Range"/>

  <arg name="color_camera_channel" default=",ColorCamera" if="$(arg enable_color_camera)"/>
  <arg name="color_camera_channel" default=""            unless="$(arg enable_color_camera)"/>

  <!-- Final construction -->
  <arg name="channel_names"            default="$(arg intensity_channel)$(arg range_channel)$(arg color_camera_channel)"/>

  <!-- Construct pixel format description from args, e.g. like "Mono16,Coord3D_C32f" -->

  <arg name="intensity_pixel_format" default="Mono16,"    if="$(arg enable_intensity)"/>
  <arg name="intensity_pixel_format" default=""           unless="$(arg enable_intensity)"/>

  <arg name="range_pixel_format"     value="Coord3D_C32f"/>

  <arg name="color_camera_pixel_format" default=",Mono16"     if="$(arg enable_color_camera)"/>
  <arg name="color_camera_pixel_format" default=""            unless="$(arg enable_color_camera)"/>

  <!-- Final construction -->
  <arg name="pixel_format"             default="$(arg intensity_pixel_format)$(arg range_pixel_format)$(arg color_camera_pixel_format)"/>


  <!-- Construct internal pixel format description from args (device sends different things under Mono16) -->
  <!-- e.g. like "PhotoneoYCoCg420,FloatToUint" -->

  <!--  Intensity component is disguised in GenICam/GigE-Vision Mono16
       - with `TextureSource` = `Color`    is custom YCoCg-R 4:2:0 pixel format
       - with `TextureSource` = `LED`      is 11 bit grayscale with very low signal (mapped to 8 bit to see anything)
       - with `TextureSource` = `Laser`    is 11 bit grayscale that behaves more like 10 bit image (saturates well before 2000)
       - with `TextureSource` = `Focus`    is 11 bit grayscale computed from laser illumnation and also behaves more like 10 bit
       - with `TextureSource` = `Computed` is 11 bit grayscale computed as above

       Intensity is always aligned to Range (same frame_id and calibration)
  -->
  <arg name="intensity_pixel_format_internal_tmp" default="PhotoneoYCoCg420"  if="$(eval texture_source == 'Color')"/>
  <arg name="intensity_pixel_format_internal_tmp" default="Mono8InMono16"     if="$(eval texture_source == 'LED')"/>
  <arg name="intensity_pixel_format_internal_tmp" default="Mono11InMono16"    if="$(eval texture_source == 'Laser')"/>
  <arg name="intensity_pixel_format_internal_tmp" default="Mono11InMono16"    if="$(eval texture_source == 'Focus')"/>
  <arg name="intensity_pixel_format_internal_tmp" default="Mono11InMono16"    if="$(eval texture_source == 'Computed')"/>

  <arg name="intensity_pixel_format_internal" default="$(arg intensity_pixel_format_internal_tmp),"    if="$(arg enable_intensity)"/>
  <arg name="intensity_pixel_format_internal" default=""                                               unless="$(arg enable_intensity)"/>

  <!-- Range component
      - is delivered as float mm data
      - here we use FloatToUint adapter
      - to keep float use empty ""
  -->
  <arg name="range_pixel_format_internal" default="FloatToUint"/>

  <!-- ColorCamera is custom YCoCg-R 4:2:0 pixel format inside GenICam/GigE-Vision Mono16 -->
  <arg name="color_camera_pixel_format_internal" default=",PhotoneoYCoCg420"     if="$(arg enable_color_camera)"/>
  <arg name="color_camera_pixel_format_internal" default=""                      unless="$(arg enable_color_camera)"/>

  <!-- Final construction -->
  <arg name="pixel_format_internal"    default="$(arg intensity_pixel_format_internal)$(arg range_pixel_format_internal)$(arg color_camera_pixel_format_internal)"/>

  <!-- Construct camera_info_url format description from args e.g. "intensity_calibration_file,range_calibration_file" -->

  <!-- "Range_Camera" or "Range_Scanner" depending on operation_mode -->
  <arg name="range_calibration_file"      default="file://$(find camera_aravis)/calibration/photoneo/motioncam_m_plus/Range_$(arg operation_mode).yaml"/>

  <arg name="intensity_calibration_file"  default="$(arg range_calibration_file)," if="$(arg enable_intensity)"/>   <!-- aligned to Range - shared calibration -->
  <arg name="intensity_calibration_file"  default=""                               unless="$(arg enable_intensity)"/>

  <!-- ColorCamera_[Resolution_1288x730|Resolution_1932x1096|Resolution_3864x2192] depending on color_resolution -->
  <arg name="color_camera_calibration_file" default=",file://$(find camera_aravis)/calibration/photoneo/motioncam_m_plus/ColorCamera_$(arg color_resolution).yaml" if="$(arg enable_color_camera)"/>
  <arg name="color_camera_calibration_file" default=""                                                                                                        unless="$(arg enable_color_camera)"/>

  <!-- Final construction -->
  <arg name="camera_info_url" default="$(arg intensity_calibration_file)$(arg range_calibration_file)$(arg color_camera_calibration_file)"/>

  <!-- Construct frame_id format description from args e.g. "range_optical_frame,range_optical_frame" -->
  <arg name="range_frame_id"  default="range_optical_frame"/>

  <arg name="intensity_frame_id"  default="$(arg range_frame_id),"        if="$(arg enable_intensity)"/> <!-- aligned to Range - shared frame id -->
  <arg name="intensity_frame_id"  default=""                              unless="$(arg enable_intensity)"/>

  <arg name="color_camera_frame_id"  default=",color_camera_optical_frame"    if="$(arg enable_color_camera)"/>
  <arg name="color_camera_frame_id"  default=""                               unless="$(arg enable_color_camera)"/>

  <!-- Final construction  -->
  <arg name="frame_id" default="$(arg intensity_frame_id)$(arg range_frame_id)$(arg color_camera_frame_id)"/>

  <!-- End of component description construction -->

  <!-- ####################################################################### -->
  <!-- Finally launch nodes/nodelets                                           -->
  <!-- ####################################################################### -->

  <!-- Publish transform between color_camera_optical_frame and range_optical_frame -->
  <include file="$(find camera_aravis)/calibration/photoneo/motioncam_m_plus/ColorCameraRangeExtrinsics.launch" if="$(arg enable_color_camera)"/>

  <!-- Nodelet Manager -->
  <node if="$(arg load_manager)" pkg="nodelet" type="nodelet" name="$(arg manager_name)" args="manager" output="screen">
    <param name="num_worker_threads" value="$(arg manager_threads)" />
  </node>

  <!-- Aravis RGB camera nodelet -->
  <node pkg="nodelet" type="nodelet" name="$(arg sensor_name)" args="load camera_aravis/CameraAravisNodelet $(arg manager_name)" output="screen">
    <param name="verbose"                value="$(arg verbose)"/>

    <param name="guid"                   value="$(arg serial_no)"/>

    <!-- Multistream Camera (not Multisource) -->
    <param name="channel_names"          value="$(arg channel_names)"/>

    <param name="pixel_format"           value="$(arg pixel_format)"/>
    <param name="pixel_format_internal"  value="$(arg pixel_format_internal)"/>

    <param name="frame_id"               value="$(arg frame_id)"/>
    <param name="camera_info_url"        value="$(arg camera_info_url)"/>

    <!-- use GenICam SFNC names as stream control parameters -->

    <param name="AcquisitionFrameRate"   value="$(arg fps)" type="double"/>
    <param name="MaximumFPS"             value="$(arg fps)" type="double"/>

    <param name="OperationMode"          value="$(arg operation_mode)"/>
    <param name="CodingStrategy"         value="Interreflections"/>
    <param name="CodingQuality"          value="High"/> <!-- Scanner only: [Fast, High, Ultra] -->

    <param name="CalibrationVolumeOnly"  value="true" type="bool"/>

    <!-- RegularGrid required for higher resolution and modelling optics with intrinsics/distortion-->
    <param name="OutputTopology"         value="RegularGrid"/>

    <param name="LaserPower"             value="$(arg laser_power)" type="int"/>
    <param name="LEDPower"               value="$(arg led_power)"   type="int"/>

    <param name="ColorSettings_Resolution" value="$(arg color_resolution)" type="str"/>

    <param name="ColorSettings_ISO"      value="$(arg color_iso)" type="int"/>
    <param name="ColorSettings_Gamma"    value="$(arg color_gamma)"/>

    <param name="ColorSettings_Exposure" value="$(arg color_exposure)"/>
    <param name="CameraExposure"         value="$(arg depth_exposure)"/>
    <param name="ExposureTime"           value="$(arg depth_exposure)"/>
    <param name="SinglePatternExposure"  value="$(arg depth_exposure)"/>

    <!-- Different params and allowed values in "Camera" and "Scanner" mode -->
    <param name="CameraTextureSource"    value="$(arg texture_source)" type="str" if="$(eval operation_mode == 'Camera')" />
    <param name="TextureSource"          value="$(arg texture_source)" type="str" if="$(eval operation_mode == 'Scanner')" />

  </node>

</launch>
